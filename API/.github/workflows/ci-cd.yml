name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # Code Quality & Linting
  # ============================================
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: API/package-lock.json

      - name: Install dependencies
        working-directory: ./API
        run: npm ci

      - name: Run ESLint
        working-directory: ./API
        run: npm run lint:check

      - name: Run Prettier check
        working-directory: ./API
        run: npm run format:check

  # ============================================
  # Security Scanning
  # ============================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./API
        run: npm ci

      - name: Run npm audit
        working-directory: ./API
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'getplot-api'
          path: './API'
          format: 'HTML'
        continue-on-error: true

  # ============================================
  # Unit Tests
  # ============================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: getplot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: API/package-lock.json

      - name: Install dependencies
        working-directory: ./API
        run: npm ci

      - name: Run unit tests
        working-directory: ./API
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/getplot_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          JWT_REFRESH_SECRET: test_refresh_secret_key_for_testing
        run: npm run test:unit

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./API/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================
  # Integration Tests
  # ============================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: getplot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: API/package-lock.json

      - name: Install dependencies
        working-directory: ./API
        run: npm ci

      - name: Run database migrations
        working-directory: ./API
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/getplot_test
        run: npm run migrate

      - name: Run integration tests
        working-directory: ./API
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/getplot_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          JWT_REFRESH_SECRET: test_refresh_secret_key_for_testing
        run: npm run test:integration

  # ============================================
  # Build Docker Images
  # ============================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - auth-service
          - properties-service
          - transactions-service
          - users-service
          - notifications-service
          - analytics-service
          - api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./API/services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-api.getplot.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS services
          aws ecs update-service --cluster getplot-staging --service auth-service --force-new-deployment
          aws ecs update-service --cluster getplot-staging --service properties-service --force-new-deployment
          aws ecs update-service --cluster getplot-staging --service transactions-service --force-new-deployment
          aws ecs update-service --cluster getplot-staging --service users-service --force-new-deployment
          aws ecs update-service --cluster getplot-staging --service notifications-service --force-new-deployment
          aws ecs update-service --cluster getplot-staging --service analytics-service --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable --cluster getplot-staging --services auth-service

      - name: Run smoke tests
        run: |
          curl -f https://staging-api.getplot.com/health || exit 1

      - name: Notify team
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Staging deployment completed: ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================
  # Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.getplot.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS services with blue/green deployment
          aws ecs update-service --cluster getplot-production --service auth-service --force-new-deployment
          aws ecs update-service --cluster getplot-production --service properties-service --force-new-deployment
          aws ecs update-service --cluster getplot-production --service transactions-service --force-new-deployment
          aws ecs update-service --cluster getplot-production --service users-service --force-new-deployment
          aws ecs update-service --cluster getplot-production --service notifications-service --force-new-deployment
          aws ecs update-service --cluster getplot-production --service analytics-service --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable --cluster getplot-production --services auth-service

      - name: Run smoke tests
        run: |
          curl -f https://api.getplot.com/health || exit 1

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Notify team
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Production deployment successful: v${{ github.run_number }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

