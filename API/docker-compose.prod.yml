# Production Docker Compose Configuration
version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: getplot-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network-prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: getplot-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network-prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: getplot-rabbitmq-prod
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network-prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # API Gateway
  api-gateway:
    image: getplot/api-gateway:${VERSION:-latest}
    container_name: getplot-gateway-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      GATEWAY_PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      PROPERTIES_SERVICE_URL: http://properties-service:3002
      TRANSACTIONS_SERVICE_URL: http://transactions-service:3003
      USERS_SERVICE_URL: http://users-service:3004
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3005
      ANALYTICS_SERVICE_URL: http://analytics-service:3006
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - getplot-network-prod
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Auth Service
  auth-service:
    image: getplot/auth-service:${VERSION:-latest}
    container_name: getplot-auth-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Properties Service
  properties-service:
    image: getplot/properties-service:${VERSION:-latest}
    container_name: getplot-properties-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Transactions Service
  transactions-service:
    image: getplot/transactions-service:${VERSION:-latest}
    container_name: getplot-transactions-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      PAYSTACK_SECRET_KEY: ${PAYSTACK_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Users Service
  users-service:
    image: getplot/users-service:${VERSION:-latest}
    container_name: getplot-users-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Notifications Service
  notifications-service:
    image: getplot/notifications-service:${VERSION:-latest}
    container_name: getplot-notifications-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      AFRICASTALKING_API_KEY: ${AFRICASTALKING_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Analytics Service
  analytics-service:
    image: getplot/analytics-service:${VERSION:-latest}
    container_name: getplot-analytics-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3006
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - getplot-network-prod
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  getplot-network-prod:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  rabbitmq_data_prod:

