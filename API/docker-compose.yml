# Development Docker Compose Configuration
version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: getplot-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: getplot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: getplot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: getplot-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - getplot-network

  # API Gateway
  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: getplot-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      GATEWAY_PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      PROPERTIES_SERVICE_URL: http://properties-service:3002
      TRANSACTIONS_SERVICE_URL: http://transactions-service:3003
      USERS_SERVICE_URL: http://users-service:3004
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3005
      ANALYTICS_SERVICE_URL: http://analytics-service:3006
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - redis
      - auth-service
      - properties-service
    volumes:
      - ./gateway:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: getplot-auth
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      JWT_REFRESH_SECRET: dev_refresh_secret_key_change_in_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Properties Service
  properties-service:
    build:
      context: ./services/properties-service
      dockerfile: Dockerfile
    container_name: getplot-properties
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/properties-service:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Transactions Service
  transactions-service:
    build:
      context: ./services/transactions-service
      dockerfile: Dockerfile
    container_name: getplot-transactions
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/transactions-service:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Users Service
  users-service:
    build:
      context: ./services/users-service
      dockerfile: Dockerfile
    container_name: getplot-users
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/users-service:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Notifications Service
  notifications-service:
    build:
      context: ./services/notifications-service
      dockerfile: Dockerfile
    container_name: getplot-notifications
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/notifications-service:/app
      - /app/node_modules
    networks:
      - getplot-network

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: getplot-analytics
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/getplot
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/analytics-service:/app
      - /app/node_modules
    networks:
      - getplot-network

networks:
  getplot-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

